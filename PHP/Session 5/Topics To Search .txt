Topics To Search:
################

|---------------------------------------------------------------------------------------------------
|
|#######################
|# get and post in php #
|#######################
|
|Get and Post methods are the HTTP request methods used inside the <form> tag
|to send form data to the server. HTTP protocol enables the communication between the client 
|and the server where a browser can be the client, and an application running on a computer system 
|that hosts your website can be the server.
|
|
|The GET Method
|GET is used to request data from a specified resource.
|
|Note that the query string (name/value pairs) is sent in the URL of a GET request:
|
|/test/demo_form.php?name1=value1&name2=value2
|Some notes on GET requests:
|
|GET requests can be cached
|GET requests remain in the browser history
|GET requests can be bookmarked
|GET requests should never be used when dealing with sensitive data
|GET requests have length restrictions
|GET requests are only used to request data (not modify)
|The POST Method
|POST is used to send data to a server to create/update a resource.
|
|The data sent to the server with POST is stored in the request body of the HTTP request:
|
|POST /test/demo_form.php HTTP/1.1
|Host: w3schools.com
|
|name1=value1&name2=value2
|Some notes on POST requests:
|
|POST requests are never cached
|POST requests do not remain in the browser history
|POST requests cannot be bookmarked
|POST requests have no restrictions on data length
|
|---------------------------------------------------------------------------------------------------



|------------------------------------------------------------------------------------------------
|
|############################
|# Status codes of response #
|############################
|
|The Status-Code element in a server response, is a 3-digit integer where 
|the first digit of the Status-Code defines the class of response and the last two digits
| do not have any categorization role. There are 5 values for the first digit:
|Code and Description
|1-1xx: Informational
|It means the request has been received and the process is continuing.
|
|2- 2xx: Success
|It means the action was successfully received, understood, and accepted.
|
|3- 3xx: Redirection
|It means further action must be taken in order to complete the request.
|
|4- 4xx: Client Error
|It means the request contains incorrect syntax or cannot be fulfilled.
|
|5- 5xx: Server Error
|It means the server failed to fulfill an apparently valid request.
|
|HTTP status codes are extensible and HTTP applications are not required to understand 
|the meaning of all the registered status codes. Given below is a list of all the status codes.
|-------------------------------------------------------------------------------------------------



|------------------------------------------------------------------------------
|############
|# Session: #
|############
|A cookie is often used to identify a user. 
|A cookie is a small file that the server embeds on the user's computer. 
|Each time the same computer requests a page with a browser, 
|it will send the cookie too. 
|With PHP, you can both create and retrieve cookie values.
|
|Create Cookies With PHP
|A cookie is created with the setcookie() function.
|
|Syntax
|setcookie(name, value, expire, path, domain, secure, httponly);
|
|Notes:
|
|1-This is a 'superglobal', or automatic global, variable. 
|This simply means that it is available in all scopes throughout a script. 
|There is no need to do global $variable; to access it within functions or methods.
|2-Only the name parameter is required. All other parameters are optional.
|
|Example:
|<?php
|$cookie_name = "user";
|$cookie_value = "John Doe";
|setcookie($cookie_name, $cookie_value, time() + (86400 * 30), "/"); // 86400 = 1 day
|?>
|<html>
|<body>
|
|<?php
|if(!isset($_COOKIE[$cookie_name])) {
|  echo "Cookie named '" . $cookie_name . "' is not set!";
|} else {
|  echo "Cookie '" . $cookie_name . "' is set!<br>";
|  echo "Value is: " . $_COOKIE[$cookie_name];
|}
|?>
|
|</body>
|</html>
|
|------------------------------------------------------------------------------


|------------------------------------------------------------------------------------------
|#############
|# Sessions: #
|#############
|A session is a way to store information (in variables) to be used across multiple pages.
|
|Unlike a cookie, the information is not stored on the users computer.
|
|
|What is a PHP Session?
|When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state.
|
|Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser.
|
|So; Session variables hold information about one single user, and are available to all pages in one application.
|
|Tip: If you need a permanent storage, you may want to store the data in a database.
|
|Start a PHP Session
|A session is started with the session_start() function.
|
|Session variables are set with the PHP global variable: $_SESSION.
|
|Now, let's create a new page called "demo_session1.php". In this page, we start a new PHP session and set some session variables:
|
|ExampleGet your own PHP Server
|<?php
|// Start the session
|session_start();
|?>
|<!DOCTYPE html>
|<html>
|<body>
|
|<?php
|// Set session variables
|$_SESSION["favcolor"] = "green";
|$_SESSION["favanimal"] = "cat";
|echo "Session variables are set.";
|?>
|
|</body>
|</html>
|
|------------------------------------------------------------------------------------------